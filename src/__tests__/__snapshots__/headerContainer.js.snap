// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    user={
      Object {
        "id": 1,
        "userName": "mahk",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="header"
        >
          <h1
            className="title"
          >
            MyCommute
          </h1>
          <div
            className="current-weather"
          />
        </div>,
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(UserNavBar)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          path="/user/1"
        />,
      ],
      "className": "main-header",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="title"
            >
              MyCommute
            </h1>,
            <div
              className="current-weather"
            />,
          ],
          "className": "header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "MyCommute",
              "className": "title",
            },
            "ref": null,
            "rendered": "MyCommute",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                false,
                undefined,
              ],
              "className": "current-weather",
            },
            "ref": null,
            "rendered": Array [
              false,
              undefined,
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(UserNavBar)",
            "type": [Function],
            Symbol(Symbol.hasInstance): [Function],
          },
          "path": "/user/1",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header"
          >
            <h1
              className="title"
            >
              MyCommute
            </h1>
            <div
              className="current-weather"
            />
          </div>,
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(UserNavBar)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/user/1"
          />,
        ],
        "className": "main-header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="title"
              >
                MyCommute
              </h1>,
              <div
                className="current-weather"
              />,
            ],
            "className": "header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "MyCommute",
                "className": "title",
              },
              "ref": null,
              "rendered": "MyCommute",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  undefined,
                ],
                "className": "current-weather",
              },
              "ref": null,
              "rendered": Array [
                false,
                undefined,
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(UserNavBar)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
            "path": "/user/1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
